<?php
if ( ! defined('BASEPATH')) exit('No direct script access allowed');

	class Membership extends CI_Controller {
	
	public $short_code;
	public $academy_admin;
	public $academy_id;
	public $logged_user;
	public $is_club_admin;

		public function __construct()
		{
			parent:: __construct();
			$this->load->helper('form', 'url');
			$this->load->library('form_validation');
			$this->load->library('session');

			//if(!$this->session->userdata('user')){
				//redirect('login');
			//}
			//error_reporting(-1);
			// Load database			
			$this->load->model('academy_mdl/model_academy');
			$this->load->model('academy_mdl/model_general', 'general');
			$this->load->model('academy_mdl/model_news');

			$this->short_code		= $this->uri->segment(1);
			$this->academy_admin	= $this->general->get_org_admin($this->short_code);
			$this->academy_id		= $this->general->get_orgid($this->short_code);
			$this->logged_user		= $this->session->userdata('users_id');

			$this->admin_menu_items = array('0'=>'');
			if($this->logged_user != $this->academy_admin)
			$this->admin_menu_items = array('0'=>'8');

			$this->is_club_admin = 0;
			if($this->logged_user == $this->academy_admin){
			$this->is_club_admin = 1;
			}
//echo "<pre>"; print_r($_SERVER['HTTP_X_FORWARDED_HOST']); exit;
			if(!$this->logged_user){
			$this->load->library('facebook' ,  array("appId" => FB_APPID, "secret" => FB_KEY, "redirect_url" => FB_REDIRECT ));
			//$this->load->library('facebook');
			}
		//				echo "<pre>"; print_r($GLOBALS); exit;

		}
		
		public function get_fb_login(){
			$login  = $this->facebook->getLoginUrl();
			return $login;
		}

		public function get_google_login(){

		// Store values in variables from project created in Google Developer Console
		$client_id			= '170374605326-p02hhgiia6fqncck0982i401madv6n72.apps.googleusercontent.com';
		$client_secret		= 'XyOwkQkScXXca0wG4paTUx6A';
		$redirect_uri		= 'https://a2msports.com/login/auth_check';
		$simple_api_key = 'AIzaSyC0JNMWyyW6t1fSNyrprBJC2bWKG4btytc';

		include_once APPPATH."libraries/google_login_api_HRWNdR/src/Google_Client.php";
		include_once APPPATH."libraries/google_login_api_HRWNdR/src/contrib/Google_Oauth2Service.php";
        
        // Google Project API Credentials
        $clientId	   = $client_id;
        $clientSecret = $client_secret;
        $redirectUrl   = $redirect_uri;
        
        // Google Client Configuration
        $gClient = new Google_Client();
        $gClient->setApplicationName('A2MSports');
        $gClient->setClientId($clientId);
        $gClient->setClientSecret($clientSecret);
        $gClient->setRedirectUri($redirectUrl);

		//$gclient->setDefaultOption('verify', false); // Can be removed
        $google_oauthV2 = new Google_Oauth2Service($gClient);
        $token				 = $this->session->userdata('token');

       // if (!empty($token)) {
        if ($token != "") {
            $gClient->setAccessToken($token);
        }

        $data['authUrl'] = $gClient->createAuthUrl();
      
			return $data['authUrl'];
		}

		public function get_club_menu($org_id){
			$get_menu = $this->general->get_club_menu($org_id);
			$club_menu = array();

			if($get_menu)
				$club_menu = json_decode($get_menu['Active_Menu_Ids'], TRUE);
			return $club_menu;
		}

		public function index($data="")
		{
			exit;		
		}
		
		public function get_org_details($org_id)
		{
			$org_details			= $this->model_academy->get_academy_details($org_id); 
			$data['org_details']	= $org_details; 

			$data['creator']		= $org_details['Aca_User_id'];

			$data['menu_list']		= $this->model_academy->get_menu_list();
			$data['act_menu_list']	= $this->model_academy->get_act_menu_list($org_id);
			$data['results']		= $this->model_academy->get_news($org_id);
			$data['sport_levels']	= $this->model_academy->get_tennis_levels();

			return $data;
		}

		public function paynow($paylink_id){
			$get_pay = $this->model_academy->get_paylink($paylink_id);

			if($get_pay){
				$mem_code			= $get_pay['Membership_Code'];
				$get_mem_dets	= $this->general->get_onerow('Membership_Types', 'Membership_ID', $mem_code);

				if($get_pay['Type'] == 'OT'){
					$pp_items = array('User_ID' => $get_pay['User_ID'], 
						'Amount' => $get_mem_dets['ActivationFee'],
						'Freq' => $get_mem_dets['Frequency_Code'],
						'Item_ID' => $get_mem_dets['Membership_ID'],
						'Item_Name' => $get_mem_dets['Membership_ID'].'-'.$get_mem_dets['Membership_Type'].'-One Time Setup',
						'Occurrence' => $get_pay['Occurrence']);
					$this->paypal_payment_ot($pp_items);
				}

				if($get_pay['Type'] == 'SUBSCR'){
					$pp_items = array('User_ID' => $get_pay['User_ID'], 
						'Amount' => $get_mem_dets['Fee'],
						'Freq' => $get_mem_dets['Frequency_Code'],
						'Item_ID' => $get_mem_dets['Membership_ID'],
						'Item_Name' => $get_mem_dets['Membership_ID'].'-'.$get_mem_dets['Membership_Type'],
						'Occurrence' => $get_pay['Occurrence']);
					$this->paypal_payment_subscr($pp_items);
				}
		 }
		}

		public function paypal_payment_ot($pp_items){
				$this->load->library('paypal_lib');

				$paypal_id				= SANDBOX_PAYPAL_ID;
				$currency_code	= 'USD';
				$paypalURL			= SANDBOX_PAYPAL_URL; //PayPal api url
				$logo = base_url().'images/logo.png';
				$url	   = base_url().$this->uri->segment(1);

				$returnURL = $url.'/paypal/ot_success?sub_type=ot&amt='.$pp_items['Amount'].'&reg_user='.$pp_items['User_ID'];

				$cancelURL = $url.'/paypal/ot_cancel';	//payment cancel url
				$notifyURL  = $url.'/paypal/ot_ipn';			//ipn url
				$this->paypal_lib->add_field('business', $paypal_id);
				//$this->paypal_lib->add_field('cmd', "_xclick-subscriptions");
				$this->paypal_lib->add_field('return', $returnURL);
				$this->paypal_lib->add_field('cancel_return', $cancelURL);
				$this->paypal_lib->add_field('currency_code', $currency_code);
				$this->paypal_lib->add_field('notify_url', $notifyURL);
				$this->paypal_lib->add_field('on0', $pp_items['User_ID']);
				$this->paypal_lib->add_field('item_number',  $pp_items['Item_ID']);
				$this->paypal_lib->add_field('item_name',  $pp_items['Item_Name']);
				$this->paypal_lib->add_field('amount', $pp_items['Amount']);
				$this->paypal_lib->image($logo);
				
				$this->paypal_lib->test_paypal_auto_form();
		}

		public function paypal_payment_subscr($pp_items){
				$this->load->library('paypal_lib');

				$paypal_id			 = SANDBOX_PAYPAL_ID;
				$currency_code = 'USD';
				$paypalURL		 = SANDBOX_PAYPAL_URL;		//PayPal api url
				$logo = base_url().'images/logo.png';
				$url	   = base_url().$this->uri->segment(1);

				$returnURL = $url.'/paypal/subscr_success?sub_type=subscr&amt='.$pp_items['Amount'].'&reg_user='.$pp_items['User_ID'];

				$cancelURL = $url.'/paypal/subscr_cancel';	//payment cancel url
				$notifyURL  = $url.'/paypal/subscr_ipn';		//ipn url

				$this->paypal_lib->add_field('business', $paypal_id);
				$this->paypal_lib->add_field('cmd', "_xclick-subscriptions");
				$this->paypal_lib->add_field('return', $returnURL);
				$this->paypal_lib->add_field('cancel_return', $cancelURL);
				$this->paypal_lib->add_field('currency_code', $currency_code);
				$this->paypal_lib->add_field('notify_url', $notifyURL);
				$this->paypal_lib->add_field('on0',   $pp_items['User_ID']);
				$this->paypal_lib->add_field('custom',   $pp_items['User_ID'].'-'.$this->academy_id);
				$this->paypal_lib->add_field('a3',    $pp_items['Amount']);
				$this->paypal_lib->add_field('t3',    $pp_items['Freq']);
				$this->paypal_lib->add_field('p3',  1);
				$this->paypal_lib->add_field('src',  1);
				echo "<pre>"; print_r($pp_items); exit;
				if($pp_items['Occurrence'])
					$this->paypal_lib->add_field('srt',  $pp_items['Occurrence']);
				//$this->paypal_lib->add_field('srt',  10);
				$this->paypal_lib->add_field('sra',  2);
				$this->paypal_lib->add_field('item_number', $pp_items['Item_ID']);
				$this->paypal_lib->add_field('item_name',  $pp_items['Item_Name']);
				$this->paypal_lib->image($logo);
				$this->paypal_lib->test_paypal_auto_form();
		}

		public function success(){
			$org_details			= $this->model_academy->get_academy_details($this->academy_id); 
			$data['org_details']	= $org_details;
				
				$this->load->view('academy_views/includes/academy_header', $data);
				$this->load->view('academy_views/view_membership_subscr_complete');
				$this->load->view('academy_views/includes/academy_footer');
		}

		public function ot_success($org_id, $user_id=''){
			//echo "test"; exit;
			//echo $this->session->flashdata('user_temp_id'); exit;
			if($this->logged_user)
				$user_id = $this->logged_user;

			if(!$user_id){
				echo "Invalid Access!";
				exit;
			}

			$cond = array('Club_ID' => $org_id, 'User_ID' => $user_id, 'Type' => 'SUBSCR', 'Pay_Status' => 'NOT PAID');
			$get_pay = $this->general->get_results('Membership_PaymentLinks', $cond);
			$get_sub = $this->general->get_onerow('Membership_Types', 'Membership_ID', $get_pay[0]->Membership_Code);
			//echo "<pre>"; print_r($get_pay); 	exit;
			$org_details			= $this->model_academy->get_academy_details($org_id);
			//echo "<pre>"; print_r($org_details); exit;
			$data['org_details']	= $org_details; 

			if($get_pay){
				$data['sub_pay'] =  $get_pay;
				$data['get_sub'] =  $get_sub;
				$this->load->view('academy_views/includes/academy_header', $data);
				$this->load->view('academy_views/view_membership_subscr_complete', $data);
				$this->load->view('academy_views/includes/academy_footer');
			}
			else{
				$this->load->view('academy_views/includes/academy_header', $data);
				$this->load->view('academy_views/view_membership_subscr_complete');
				$this->load->view('academy_views/includes/academy_footer');
			}
		}

	}